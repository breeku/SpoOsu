{"ast":null,"code":"import _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Playlists.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport spotify from \"../services/spotify\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PlaylistList from \"./Playlists/PlaylistList\";\nimport debug from \"../helpers/debug\";\nimport LazyLoad from \"react-lazyload\";\n/*\r\nTODO:\r\n    Browser back button\r\n*/\n\nconst useStyles = makeStyles(theme => ({\n  imageContainer: {\n    position: \"relative\",\n    textAlign: \"center\",\n    transition: \"transform .2s\",\n    \"&:hover\": {\n      transform: \"scale(1.03)\"\n    }\n  },\n  textCentered: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"calc(96%)\",\n    transform: \"translate(-50%, -50%)\",\n    color: \"white\",\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  },\n  image: {\n    borderRadius: \"5px\",\n    margin: \"0.5em\",\n    maxWidth: 500,\n    maxHeight: 500,\n    backgroundColor: \"rgba(0,0,0,0)\"\n  },\n  placeholder: {\n    minWidth: 500,\n    minHeight: 500\n  }\n}));\n\nconst Playlists = ({\n  accessToken,\n  refreshToken,\n  history,\n  cachedPlaylist\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        playlist = _useState2[0],\n        setPlaylist = _useState2[1];\n\n  const _useState3 = useState(accessToken),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newAccessToken = _useState4[0],\n        setNewAccessToken = _useState4[1];\n\n  const classes = useStyles();\n  const tokens = {\n    accessToken: newAccessToken,\n    refreshToken\n  };\n  const currentElement = useCallback(node => {\n    if (node !== null) {\n      if (node.className === history) {\n        node.scrollIntoView();\n      }\n    }\n  }, [history]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      let response = await spotify.getPlaylists(tokens);\n      setPlaylist(response.items); //setPlaylist(debug.items)\n      //console.log(\"get playlists\")\n\n      if (response.refreshedToken) setNewAccessToken(response.refreshedToken);\n    };\n\n    if (cachedPlaylist) {\n      setPlaylist(cachedPlaylist);\n    } else {\n      fetchPlaylists();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, playlist ? playlist.map(list => React.createElement(PlaylistList, {\n    currentElement: currentElement,\n    playlist: playlist,\n    tokens: tokens,\n    list: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })) : React.createElement(Grid, {\n    container: true,\n    item: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })));\n};\n\nexport default Playlists;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Playlists.js"],"names":["React","useState","useEffect","useCallback","spotify","Grid","makeStyles","CircularProgress","PlaylistList","debug","LazyLoad","useStyles","theme","imageContainer","position","textAlign","transition","transform","textCentered","top","left","width","color","backgroundColor","image","borderRadius","margin","maxWidth","maxHeight","placeholder","minWidth","minHeight","Playlists","accessToken","refreshToken","history","cachedPlaylist","playlist","setPlaylist","newAccessToken","setNewAccessToken","classes","tokens","currentElement","node","className","scrollIntoView","fetchPlaylists","response","getPlaylists","items","refreshedToken","map","list"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\r\nimport spotify from \"../services/spotify\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\n\r\nimport PlaylistList from \"./Playlists/PlaylistList\"\r\n\r\nimport debug from \"../helpers/debug\"\r\n\r\nimport LazyLoad from \"react-lazyload\"\r\n\r\n\r\n    /*\r\n    TODO:\r\n        Browser back button\r\n    */\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imageContainer: {\r\n        position: \"relative\",\r\n        textAlign: \"center\",\r\n        transition: \"transform .2s\",\r\n        \"&:hover\": {\r\n            transform: \"scale(1.03)\"\r\n        }\r\n    },\r\n    textCentered: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: \"calc(96%)\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        color: \"white\",\r\n        backgroundColor: \"rgba(0,0,0,0.4)\"\r\n    },\r\n    image: {\r\n        borderRadius: \"5px\",\r\n        margin: \"0.5em\",\r\n        maxWidth: 500,\r\n        maxHeight: 500,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n    },\r\n    placeholder: {\r\n        minWidth: 500,\r\n        minHeight: 500,\r\n    },\r\n}))\r\n\r\nconst Playlists = ({ accessToken, refreshToken, history, cachedPlaylist }) => {\r\n    const [playlist, setPlaylist] = useState(null)\r\n    const [newAccessToken, setNewAccessToken] = useState(accessToken)\r\n\r\n    const classes = useStyles()\r\n\r\n    const tokens = {\r\n        accessToken: newAccessToken,\r\n        refreshToken\r\n    }\r\n\r\n    const currentElement = useCallback(\r\n        node => {\r\n            if (node !== null) {\r\n                if (node.className === history) {\r\n                    node.scrollIntoView()\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    )\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            let response = await spotify.getPlaylists(tokens)\r\n            setPlaylist(response.items)\r\n            //setPlaylist(debug.items)\r\n            //console.log(\"get playlists\")\r\n            if (response.refreshedToken) setNewAccessToken(response.refreshedToken)\r\n        }\r\n        if (cachedPlaylist) {\r\n            setPlaylist(cachedPlaylist)\r\n        } else {\r\n            fetchPlaylists()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container>\r\n            {playlist ? playlist.map(list => (\r\n                <PlaylistList currentElement={currentElement} playlist={playlist} tokens={tokens} list={list}/>\r\n            )) : \r\n            <Grid container item justify=\"center\">\r\n                <CircularProgress/>\r\n            </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n"]},"metadata":{},"sourceType":"module"}