{"ast":null,"code":"import _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Playlists.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport spotifyPlaylists from \"../services/spotifyPlaylists\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport debug from \"../helpers/debug\";\nimport LazyLoad from \"react-lazyload\";\n{\n  /*\r\n  TODO:\r\n      Browser back button\r\n      Lazyload images, or think of a alternative\r\n  */\n}\nconst useStyles = makeStyles(theme => ({\n  imageContainer: {\n    position: \"relative\",\n    textAlign: \"center\"\n  },\n  textCentered: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"calc(100% - 1em)\",\n    transform: \"translate(-50%, -50%)\",\n    color: \"white\",\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  },\n  image: {\n    borderRadius: \"5px\",\n    margin: \"0.5em\",\n    maxWidth: 500,\n    maxHeight: 500,\n    backgroundColor: \"rgba(0,0,0,0)\",\n    transition: \"transform .2s\",\n    \"&:hover\": {\n      transform: \"scale(1.03)\"\n    }\n  },\n  placeholder: {\n    minWidth: 500,\n    maxWidth: 500,\n    minHeight: 500,\n    maxHeight: 500,\n    position: \"absolute\"\n  }\n}));\nconst HtmlTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: \"#f5f5f9\",\n    color: \"rgba(0, 0, 0, 0.87)\",\n    maxWidth: 320,\n    fontSize: theme.typography.pxToRem(14),\n    border: \"1px solid #dadde9\"\n  }\n}))(Tooltip);\n\nconst Playlists = ({\n  accessToken,\n  refreshToken,\n  history,\n  cachedPlaylist\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        playlist = _useState2[0],\n        setPlaylist = _useState2[1];\n\n  const classes = useStyles();\n  const tokens = {\n    accessToken,\n    refreshToken\n  };\n  const currentElement = useCallback(node => {\n    if (node !== null) {\n      if (node.className === history) {\n        node.scrollIntoView();\n      }\n    }\n  }, [history]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      let response = await spotifyPlaylists.getPlaylists(tokens); //console.log(response)\n\n      setPlaylist(response.items); //setPlaylist(debug.items)\n      //console.log(\"get playlists\")\n    };\n\n    if (cachedPlaylist) {\n      setPlaylist(cachedPlaylist);\n    } else {\n      fetchPlaylists();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, playlist.map(list => React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    md: 6,\n    xl: 4,\n    justify: \"center\",\n    key: list.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\".concat(list.id),\n    ref: currentElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(HtmlTooltip, {\n    title: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, list.name), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Tracks: \", list.tracks.total, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), \"Made by: \", list.owner.display_name)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: \"/main/tracks/\",\n      state: {\n        list,\n        playlist\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.imageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(LazyLoad, {\n    placeholder: React.createElement(\"div\", {\n      className: classes.placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })),\n    once: true,\n    throttle: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: classes.image,\n    src: list.images[0].url,\n    alt: list.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.textCentered,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, list.name))))))));\n};\n\nexport default Playlists;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Playlists.js"],"names":["React","useState","useEffect","useCallback","spotifyPlaylists","Grid","makeStyles","withStyles","Link","Tooltip","Typography","CircularProgress","debug","LazyLoad","useStyles","theme","imageContainer","position","textAlign","textCentered","top","left","width","transform","color","backgroundColor","image","borderRadius","margin","maxWidth","maxHeight","transition","placeholder","minWidth","minHeight","HtmlTooltip","tooltip","fontSize","typography","pxToRem","border","Playlists","accessToken","refreshToken","history","cachedPlaylist","playlist","setPlaylist","classes","tokens","currentElement","node","className","scrollIntoView","fetchPlaylists","response","getPlaylists","items","map","list","id","name","tracks","total","owner","display_name","pathname","state","images","url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\r\nimport spotifyPlaylists from \"../services/spotifyPlaylists\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Tooltip from \"@material-ui/core/Tooltip\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\n\r\nimport debug from \"../helpers/debug\"\r\n\r\nimport LazyLoad from \"react-lazyload\"\r\n\r\n{\r\n    /*\r\n    TODO:\r\n        Browser back button\r\n        Lazyload images, or think of a alternative\r\n*/\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imageContainer: {\r\n        position: \"relative\",\r\n        textAlign: \"center\"\r\n    },\r\n    textCentered: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: \"calc(100% - 1em)\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        color: \"white\",\r\n        backgroundColor: \"rgba(0,0,0,0.4)\"\r\n    },\r\n    image: {\r\n        borderRadius: \"5px\",\r\n        margin: \"0.5em\",\r\n        maxWidth: 500,\r\n        maxHeight: 500,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        transition: \"transform .2s\",\r\n        \"&:hover\": {\r\n            transform: \"scale(1.03)\"\r\n        }\r\n    },\r\n    placeholder: {\r\n        minWidth: 500,\r\n        maxWidth: 500,\r\n        minHeight: 500,\r\n        maxHeight: 500,\r\n        position: \"absolute\"\r\n    }\r\n}))\r\n\r\nconst HtmlTooltip = withStyles(theme => ({\r\n    tooltip: {\r\n        backgroundColor: \"#f5f5f9\",\r\n        color: \"rgba(0, 0, 0, 0.87)\",\r\n        maxWidth: 320,\r\n        fontSize: theme.typography.pxToRem(14),\r\n        border: \"1px solid #dadde9\"\r\n    }\r\n}))(Tooltip)\r\n\r\nconst Playlists = ({ accessToken, refreshToken, history, cachedPlaylist }) => {\r\n    const [playlist, setPlaylist] = useState([])\r\n\r\n    const classes = useStyles()\r\n\r\n    const tokens = {\r\n        accessToken,\r\n        refreshToken\r\n    }\r\n\r\n    const currentElement = useCallback(\r\n        node => {\r\n            if (node !== null) {\r\n                if (node.className === history) {\r\n                    node.scrollIntoView()\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    )\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            let response = await spotifyPlaylists.getPlaylists(tokens)\r\n            //console.log(response)\r\n            setPlaylist(response.items)\r\n            //setPlaylist(debug.items)\r\n            //console.log(\"get playlists\")\r\n        }\r\n        if (cachedPlaylist) {\r\n            setPlaylist(cachedPlaylist)\r\n        } else {\r\n            fetchPlaylists()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container>\r\n            {playlist.map(list => (\r\n                <Grid\r\n                    container\r\n                    item\r\n                    xs={12}\r\n                    md={6}\r\n                    xl={4}\r\n                    justify=\"center\"\r\n                    key={list.id}\r\n                >\r\n                    <div className={`${list.id}`} ref={currentElement}>\r\n                        <HtmlTooltip\r\n                            title={\r\n                                <div>\r\n                                    <Typography variant=\"h6\">\r\n                                        {list.name}\r\n                                    </Typography>\r\n                                    <Typography>\r\n                                        Tracks: {list.tracks.total}\r\n                                        <br />\r\n                                        Made by: {list.owner.display_name}\r\n                                    </Typography>\r\n                                </div>\r\n                            }\r\n                        >\r\n                            <Link\r\n                                to={{\r\n                                    pathname: `/main/tracks/`,\r\n                                    state: { list, playlist }\r\n                                }}\r\n                            >\r\n                                <div className={classes.imageContainer}>\r\n                                    <LazyLoad\r\n                                        placeholder={\r\n                                            <div\r\n                                                className={classes.placeholder}\r\n                                            >\r\n                                                <CircularProgress />\r\n                                            </div>\r\n                                        }\r\n                                        once\r\n                                        throttle={1000}\r\n                                    >\r\n                                        <img\r\n                                            className={classes.image}\r\n                                            src={list.images[0].url}\r\n                                            alt={list.name}\r\n                                        />\r\n                                    </LazyLoad>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        className={classes.textCentered}\r\n                                    >\r\n                                        {list.name}\r\n                                    </Typography>\r\n                                </div>\r\n                            </Link>\r\n                        </HtmlTooltip>\r\n                    </div>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n"]},"metadata":{},"sourceType":"module"}