{"ast":null,"code":"import _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Playlists.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport spotify from \"../services/spotify\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PlaylistList from \"./Playlists/PlaylistList\";\nimport debug from \"../helpers/debug\";\n/*\r\nTODO:\r\n    Browser back button\r\n*/\n\nconst Playlists = ({\n  accessToken,\n  refreshToken,\n  history,\n  cachedPlaylist\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        playlist = _useState2[0],\n        setPlaylist = _useState2[1];\n\n  const _useState3 = useState(accessToken),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newAccessToken = _useState4[0],\n        setNewAccessToken = _useState4[1];\n\n  const tokens = {\n    accessToken: newAccessToken,\n    refreshToken\n  };\n  const currentElement = useCallback(node => {\n    if (node !== null) {\n      if (node.className === history) {\n        node.scrollIntoView();\n      }\n    }\n  }, [history]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      let response = await spotify.getPlaylists(tokens);\n      setPlaylist(response.items); //setPlaylist(debug.items)\n      //console.log(\"get playlists\")\n\n      if (response.refreshedToken) setNewAccessToken(response.refreshedToken);\n    };\n\n    if (cachedPlaylist) {\n      setPlaylist(cachedPlaylist);\n    } else {\n      fetchPlaylists();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, playlist ? playlist.map(list => React.createElement(PlaylistList, {\n    currentElement: currentElement,\n    playlist: playlist,\n    tokens: tokens,\n    list: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })) : React.createElement(Grid, {\n    container: true,\n    item: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })));\n};\n\nexport default Playlists;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Playlists.js"],"names":["React","useState","useEffect","useCallback","spotify","Grid","CircularProgress","PlaylistList","debug","Playlists","accessToken","refreshToken","history","cachedPlaylist","playlist","setPlaylist","newAccessToken","setNewAccessToken","tokens","currentElement","node","className","scrollIntoView","fetchPlaylists","response","getPlaylists","items","refreshedToken","map","list"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAEA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,OAAOC,KAAP,MAAkB,kBAAlB;AAGI;;;;;AAMJ,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA,OAA7B;AAAsCC,EAAAA;AAAtC,CAAD,KAA4D;AAAA,oBAC1CZ,QAAQ,CAAC,IAAD,CADkC;AAAA;AAAA,QACnEa,QADmE;AAAA,QACzDC,WADyD;;AAAA,qBAE9Bd,QAAQ,CAACS,WAAD,CAFsB;AAAA;AAAA,QAEnEM,cAFmE;AAAA,QAEnDC,iBAFmD;;AAI1E,QAAMC,MAAM,GAAG;AACXR,IAAAA,WAAW,EAAEM,cADF;AAEXL,IAAAA;AAFW,GAAf;AAKA,QAAMQ,cAAc,GAAGhB,WAAW,CAC9BiB,IAAI,IAAI;AACJ,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACf,UAAIA,IAAI,CAACC,SAAL,KAAmBT,OAAvB,EAAgC;AAC5BQ,QAAAA,IAAI,CAACE,cAAL;AACH;AACJ;AACJ,GAP6B,EAQ9B,CAACV,OAAD,CAR8B,CAAlC;AAWAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,cAAc,GAAG,YAAY;AAC/B,UAAIC,QAAQ,GAAG,MAAMpB,OAAO,CAACqB,YAAR,CAAqBP,MAArB,CAArB;AACAH,MAAAA,WAAW,CAACS,QAAQ,CAACE,KAAV,CAAX,CAF+B,CAG/B;AACA;;AACA,UAAIF,QAAQ,CAACG,cAAb,EAA6BV,iBAAiB,CAACO,QAAQ,CAACG,cAAV,CAAjB;AAChC,KAND;;AAOA,QAAId,cAAJ,EAAoB;AAChBE,MAAAA,WAAW,CAACF,cAAD,CAAX;AACH,KAFD,MAEO;AACHU,MAAAA,cAAc;AACjB,KAZW,CAaZ;;AACH,GAdQ,EAcN,EAdM,CAAT;AAgBA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,QAAQ,GAAGA,QAAQ,CAACc,GAAT,CAAaC,IAAI,IACzB,oBAAC,YAAD;AAAc,IAAA,cAAc,EAAEV,cAA9B;AAA8C,IAAA,QAAQ,EAAEL,QAAxD;AAAkE,IAAA,MAAM,EAAEI,MAA1E;AAAkF,IAAA,IAAI,EAAEW,IAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,CAAH,GAGT,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,IAAI,MAApB;AAAqB,IAAA,OAAO,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ;AAYH,CAhDD;;AAkDA,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\r\nimport spotify from \"../services/spotify\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\n\r\nimport PlaylistList from \"./Playlists/PlaylistList\"\r\n\r\nimport debug from \"../helpers/debug\"\r\n\r\n\r\n    /*\r\n    TODO:\r\n        Browser back button\r\n    */\r\n\r\n\r\nconst Playlists = ({ accessToken, refreshToken, history, cachedPlaylist }) => {\r\n    const [playlist, setPlaylist] = useState(null)\r\n    const [newAccessToken, setNewAccessToken] = useState(accessToken)\r\n\r\n    const tokens = {\r\n        accessToken: newAccessToken,\r\n        refreshToken\r\n    }\r\n\r\n    const currentElement = useCallback(\r\n        node => {\r\n            if (node !== null) {\r\n                if (node.className === history) {\r\n                    node.scrollIntoView()\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    )\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            let response = await spotify.getPlaylists(tokens)\r\n            setPlaylist(response.items)\r\n            //setPlaylist(debug.items)\r\n            //console.log(\"get playlists\")\r\n            if (response.refreshedToken) setNewAccessToken(response.refreshedToken)\r\n        }\r\n        if (cachedPlaylist) {\r\n            setPlaylist(cachedPlaylist)\r\n        } else {\r\n            fetchPlaylists()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container>\r\n            {playlist ? playlist.map(list => (\r\n                <PlaylistList currentElement={currentElement} playlist={playlist} tokens={tokens} list={list}/>\r\n            )) : \r\n            <Grid container item justify=\"center\">\r\n                <CircularProgress/>\r\n            </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n"]},"metadata":{},"sourceType":"module"}