{"ast":null,"code":"import _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Playlists.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport spotifyPlaylists from \"../services/spotifyPlaylists\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { Link } from \"react-router-dom\";\nimport debug from \"../helpers/debug\";\nimport \"../css/paper.css\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n}));\n\nconst Playlists = ({\n  accessToken,\n  refreshToken,\n  history\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        playlist = _useState2[0],\n        setPlaylist = _useState2[1];\n\n  const classes = useStyles();\n  const tokens = {\n    accessToken,\n    refreshToken\n  };\n  const currentElement = useCallback(node => {\n    if (node !== null) {\n      if (node.className === history) {\n        node.scrollIntoView({\n          block: \"center\",\n          behavior: \"smooth\"\n        });\n        console.log(\"scrolling to \" + node.className);\n      }\n    }\n  }, [history]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      //let response = await spotifyPlaylists.getPlaylists(tokens)\n      //console.log(response)\n      //setPlaylist(response.items)\n      setPlaylist(debug.items);\n    };\n\n    fetchPlaylists(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(Container, {\n    maxWidth: \"lg\",\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, playlist.map(list => React.createElement(\"div\", {\n    className: \"\".concat(list.id, \" paper\"),\n    ref: currentElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: \"/main/tracks/\",\n      state: {\n        list\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: list.images[0].url,\n    alt: list.name,\n    className: classes.img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    container: true,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, list.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Songs: \", list.tracks.total))))))));\n};\n\nexport default Playlists;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Playlists.js"],"names":["React","useState","useEffect","useCallback","spotifyPlaylists","Grid","Paper","makeStyles","Container","Link","debug","useStyles","theme","root","flexGrow","img","margin","display","maxWidth","maxHeight","Playlists","accessToken","refreshToken","history","playlist","setPlaylist","classes","tokens","currentElement","node","className","scrollIntoView","block","behavior","console","log","fetchPlaylists","items","map","list","id","pathname","state","images","url","name","tracks","total"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\r\nimport spotifyPlaylists from \"../services/spotifyPlaylists\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport debug from \"../helpers/debug\"\r\nimport \"../css/paper.css\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    img: {\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n        maxWidth: \"100%\",\r\n        maxHeight: \"100%\"\r\n    }\r\n}))\r\n\r\nconst Playlists = ({ accessToken, refreshToken, history }) => {\r\n    const [playlist, setPlaylist] = useState([])\r\n\r\n    const classes = useStyles()\r\n\r\n    const tokens = {\r\n        accessToken,\r\n        refreshToken\r\n    }\r\n\r\n    const currentElement = useCallback(\r\n        node => {\r\n            if (node !== null) {\r\n                if (node.className === history) {\r\n                    node.scrollIntoView({ block: \"center\", behavior: \"smooth\" })\r\n                    console.log(\"scrolling to \" + node.className)\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    )\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            //let response = await spotifyPlaylists.getPlaylists(tokens)\r\n            //console.log(response)\r\n            //setPlaylist(response.items)\r\n            setPlaylist(debug.items)\r\n        }\r\n        fetchPlaylists()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.root}>\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n                {playlist.map(list => (\r\n                    <div className={`${list.id} paper`} ref={currentElement}>\r\n                        <Link\r\n                            to={{\r\n                                pathname: `/main/tracks/`,\r\n                                state: { list }\r\n                            }}\r\n                        >\r\n                            <Grid container direction=\"row\">\r\n                                <Grid item xs={6}>\r\n                                    <img\r\n                                        src={list.images[0].url}\r\n                                        alt={list.name}\r\n                                        className={classes.img}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} container direction=\"column\">\r\n                                    <p>{list.name}</p>\r\n                                    <p>Songs: {list.tracks.total}</p>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n"]},"metadata":{},"sourceType":"module"}