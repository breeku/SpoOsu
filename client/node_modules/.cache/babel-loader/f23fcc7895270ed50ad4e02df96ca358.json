{"ast":null,"code":"import _objectSpread from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Tracks\\\\TrackList.js\";\nimport React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Beatmaps from \"./Beatmaps\";\nimport osu from \"../../services/osu\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: \"1.5em\",\n    minWidth: 500\n  },\n  textCentered: {\n    color: \"white\",\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  },\n  buttonCenter: {\n    margin: \"auto\",\n    paddingLeft: \"1em\"\n  }\n}));\n\nconst TrackList = ({\n  tracksObj,\n  track\n}) => {\n  const _useState = useState(tracksObj),\n        _useState2 = _slicedToArray(_useState, 2),\n        tracks = _useState2[0],\n        setTracks = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        open = _useState4[0],\n        setOpen = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loading = _useState6[0],\n        setLoading = _useState6[1];\n\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSingular = async (track, id) => {\n    setLoading(id);\n    let copy = [...tracks];\n    let response = await osu.getTrack(track, id);\n\n    for (track of copy) {\n      if (track.track.id === response.id) {\n        let index = copy.findIndex(track => track.track.id === response.id);\n\n        let updatedTrack = _objectSpread({}, track, {\n          beatmaps: response.osuTracks\n        });\n\n        copy[index] = updatedTrack;\n        setTracks(copy);\n        setLoading(null);\n      }\n    }\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    key: track.track.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.paper,\n    style: {\n      backgroundImage: \"url(\".concat(track.track.album.images[0].url, \")\"),\n      backgroundPosition: \"center\",\n      backgroundSize: \"cover\",\n      backgroundRepeat: \"no-repeat\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: true,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    className: classes.textCentered,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, track.track.artists[0].name), React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"subtitle1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, track.track.name), React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"ID: \", track.track.id))), React.createElement(Grid, {\n    item: true,\n    className: classes.buttonCenter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, track.beatmaps ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Maps\"), React.createElement(Modal, {\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    open: open,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Beatmaps, {\n    beatmaps: track.beatmaps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))) : loading !== track.track.id ? React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => handleSingular(track.track, track.track.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Get\") : React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })))));\n};\n\nexport default TrackList;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Tracks\\TrackList.js"],"names":["React","useState","Modal","Paper","Button","Grid","Typography","makeStyles","CircularProgress","Beatmaps","osu","useStyles","theme","paper","padding","minWidth","textCentered","color","backgroundColor","buttonCenter","margin","paddingLeft","TrackList","tracksObj","track","tracks","setTracks","open","setOpen","loading","setLoading","classes","handleOpen","handleClose","handleSingular","id","copy","response","getTrack","index","findIndex","updatedTrack","beatmaps","osuTracks","backgroundImage","album","images","url","backgroundPosition","backgroundSize","backgroundRepeat","artists","name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport Modal from \"@material-ui/core/Modal\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { CircularProgress } from \"@material-ui/core\"\r\n\r\nimport Beatmaps from \"./Beatmaps\"\r\n\r\nimport osu from \"../../services/osu\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        padding: \"1.5em\",\r\n        minWidth: 500\r\n    },\r\n    textCentered: {\r\n        color: \"white\",\r\n        backgroundColor: \"rgba(0,0,0,0.4)\"\r\n    },\r\n    buttonCenter: {\r\n        margin: \"auto\",\r\n        paddingLeft: \"1em\"\r\n    }\r\n}))\r\n\r\nconst TrackList = ({ tracksObj, track }) => {\r\n    const [tracks, setTracks] = useState(tracksObj)\r\n    const [open, setOpen] = useState(false)\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleSingular = async (track, id) => {\r\n        setLoading(id)\r\n        let copy = [...tracks]\r\n        let response = await osu.getTrack(track, id)\r\n        for (track of copy) {\r\n            if (track.track.id === response.id) {\r\n                let index = copy.findIndex(\r\n                    track => track.track.id === response.id\r\n                )\r\n                let updatedTrack = {\r\n                    ...track,\r\n                    beatmaps: response.osuTracks\r\n                }\r\n                copy[index] = updatedTrack\r\n                setTracks(copy)\r\n                setLoading(null)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container item xs={12} justify=\"center\" key={track.track.id}>\r\n            <Paper\r\n                className={classes.paper}\r\n                style={{\r\n                    backgroundImage: `url(${track.track.album.images[0].url})`,\r\n                    backgroundPosition: \"center\",\r\n                    backgroundSize: \"cover\",\r\n                    backgroundRepeat: \"no-repeat\"\r\n                }}\r\n            >\r\n                <Grid item xs={12} sm container>\r\n                    {/*<Grid item>\r\n                                                <img src={track.track.album.images[1].url} className={classes.image}/>\r\n                                            </Grid>*/}\r\n                    <Grid item xs container direction=\"column\" spacing={2}>\r\n                        <Grid item xs className={classes.textCentered}>\r\n                            <Typography gutterBottom variant=\"h6\">\r\n                                {track.track.artists[0].name}\r\n                            </Typography>\r\n                            <Typography gutterBottom variant=\"subtitle1\">\r\n                                {track.track.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                ID: {track.track.id}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={classes.buttonCenter}>\r\n                        {track.beatmaps ? (\r\n                            <div>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleOpen}\r\n                                >\r\n                                    Maps\r\n                                </Button>\r\n                                <Modal\r\n                                    aria-labelledby=\"simple-modal-title\"\r\n                                    aria-describedby=\"simple-modal-description\"\r\n                                    open={open}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <Beatmaps beatmaps={track.beatmaps} />\r\n                                </Modal>\r\n                            </div>\r\n                        ) : loading !== track.track.id ? (\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() =>\r\n                                    handleSingular(track.track, track.track.id)\r\n                                }\r\n                            >\r\n                                Get\r\n                            </Button>\r\n                        ) : (\r\n                            <CircularProgress />\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default TrackList\r\n"]},"metadata":{},"sourceType":"module"}