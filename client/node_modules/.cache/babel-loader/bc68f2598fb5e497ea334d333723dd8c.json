{"ast":null,"code":"import _objectSpread from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Tracks\\\\TrackList.js\";\nimport React, { useState } from 'react';\nimport Modal from \"@material-ui/core/Modal\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport osu from \".../services/osu\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: \"1.5em\",\n    minWidth: 500\n  },\n  header: {\n    marginTop: \"0.5em\"\n  },\n  modal: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 4),\n    transform: \"translate(-50%, -50%)\",\n    top: \"50%\",\n    left: \"50%\"\n  },\n  image: {\n    maxWidth: 180,\n    maxHeight: 180\n  },\n  textCentered: {\n    color: \"white\",\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  },\n  buttonCenter: {\n    margin: \"auto\",\n    paddingLeft: \"1em\"\n  }\n}));\n\nconst TrackList = ({\n  tracksObj,\n  track\n}) => {\n  const _useState = useState(tracksObj),\n        _useState2 = _slicedToArray(_useState, 2),\n        tracks = _useState2[0],\n        setTracks = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        open = _useState4[0],\n        setOpen = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loading = _useState6[0],\n        setLoading = _useState6[1];\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSingular = async (track, id) => {\n    setLoading(id);\n    let copy = [...tracks];\n    let response = await osu.getTrack(track, id);\n\n    for (track of copy) {\n      if (track.track.id === response.id) {\n        let index = copy.findIndex(track => track.track.id === response.id);\n\n        let updatedTrack = _objectSpread({}, track, {\n          beatmaps: response.osuTracks\n        });\n\n        copy[index] = updatedTrack;\n        setTracks(copy);\n        setLoading(null);\n      }\n    }\n  };\n\n  const classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    key: track.track.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.paper,\n    style: {\n      backgroundImage: \"url(\".concat(track.track.album.images[0].url, \")\"),\n      backgroundPosition: \"center\",\n      backgroundSize: \"cover\",\n      backgroundRepeat: \"no-repeat\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: true,\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    className: classes.textCentered,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, track.track.artists[0].name), React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"subtitle1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, track.track.name), React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"ID: \", track.track.id))), React.createElement(Grid, {\n    item: true,\n    className: classes.buttonCenter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, track.beatmaps ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Maps\"), React.createElement(Modal, {\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    open: open,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.modal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"simple-modal-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Beatmaps\"), React.createElement(\"div\", {\n    id: \"simple-modal-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, track.beatmaps.beatmaps.map(beatmap => React.createElement(\"div\", {\n    key: beatmap.beatmap_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, beatmap.title, \", by\", beatmap.mapper, \"AR\", beatmap.difficulty_ar), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    target: \"_blank\",\n    href: \"https://osu.ppy.sh/beatmapsets/\" + beatmap.beatmapset_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Download\"))))))) : loading !== track.track.id ? React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => handleSingular(track.track, track.track.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Get\") : React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  })))));\n};\n\nexport default TrackList;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Tracks\\TrackList.js"],"names":["React","useState","Modal","Paper","Button","Grid","Typography","makeStyles","CircularProgress","osu","useStyles","theme","paper","padding","minWidth","header","marginTop","modal","position","width","backgroundColor","palette","background","border","boxShadow","shadows","spacing","transform","top","left","image","maxWidth","maxHeight","textCentered","color","buttonCenter","margin","paddingLeft","TrackList","tracksObj","track","tracks","setTracks","open","setOpen","loading","setLoading","handleOpen","handleClose","handleSingular","id","copy","response","getTrack","index","findIndex","updatedTrack","beatmaps","osuTracks","classes","backgroundImage","album","images","url","backgroundPosition","backgroundSize","backgroundRepeat","artists","name","map","beatmap","beatmap_id","title","mapper","difficulty_ar","beatmapset_id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Modal from \"@material-ui/core/Modal\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { CircularProgress } from \"@material-ui/core\"\r\n\r\nimport osu from \".../services/osu\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        padding: \"1.5em\",\r\n        minWidth: 500,\r\n    },\r\n    header: {\r\n        marginTop: \"0.5em\",\r\n    },\r\n    modal: {\r\n        position: \"absolute\",\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 4),\r\n        transform: \"translate(-50%, -50%)\",\r\n        top: \"50%\",\r\n        left: \"50%\"\r\n    },\r\n    image: {\r\n        maxWidth: 180,\r\n        maxHeight: 180\r\n    },\r\n    textCentered: {\r\n        color: \"white\",\r\n        backgroundColor: \"rgba(0,0,0,0.4)\"\r\n    },\r\n    buttonCenter: {\r\n        margin: \"auto\",\r\n        paddingLeft: \"1em\"\r\n    }\r\n}))\r\n\r\nconst TrackList = ({tracksObj, track}) => {\r\n    const [tracks, setTracks] = useState(tracksObj)\r\n    const [open, setOpen] = useState(false)\r\n    const [loading, setLoading] = useState(null)\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleSingular = async (track, id) => {\r\n        setLoading(id)\r\n        let copy = [...tracks]\r\n        let response = await osu.getTrack(track, id)\r\n        for (track of copy) {\r\n            if (track.track.id === response.id) {\r\n                let index = copy.findIndex(\r\n                    track => track.track.id === response.id\r\n                )\r\n                let updatedTrack = {\r\n                    ...track,\r\n                    beatmaps: response.osuTracks\r\n                }\r\n                copy[index] = updatedTrack\r\n                setTracks(copy)\r\n                setLoading(null)\r\n            }\r\n        }\r\n    }\r\n    const classes = useStyles()\r\n    return (\r\n<Grid\r\n                                    container\r\n                                    item\r\n                                    xs={12}\r\n                                    justify=\"center\"\r\n                                    key={track.track.id}\r\n                                >\r\n                                    <Paper\r\n                                        className={classes.paper}\r\n                                        style={{\r\n                                            backgroundImage: `url(${\r\n                                                track.track.album.images[0].url\r\n                                            })`,\r\n                                            backgroundPosition: \"center\",\r\n                                            backgroundSize: \"cover\",\r\n                                            backgroundRepeat: \"no-repeat\"\r\n                                        }}\r\n                                    >\r\n                                        <Grid item xs={12} sm container>\r\n                                            {/*<Grid item>\r\n                                                <img src={track.track.album.images[1].url} className={classes.image}/>\r\n                                            </Grid>*/}\r\n                                            <Grid\r\n                                                item\r\n                                                xs\r\n                                                container\r\n                                                direction=\"column\"\r\n                                                spacing={2}\r\n                                            >\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs\r\n                                                    className={\r\n                                                        classes.textCentered\r\n                                                    }\r\n                                                >\r\n                                                    <Typography\r\n                                                        gutterBottom\r\n                                                        variant=\"h6\"\r\n                                                    >\r\n                                                        {\r\n                                                            track.track\r\n                                                                .artists[0].name\r\n                                                        }\r\n                                                    </Typography>\r\n                                                    <Typography\r\n                                                        gutterBottom\r\n                                                        variant=\"subtitle1\"\r\n                                                    >\r\n                                                        {track.track.name}\r\n                                                    </Typography>\r\n                                                    <Typography\r\n                                                        variant=\"body2\"\r\n                                                        color=\"textSecondary\"\r\n                                                    >\r\n                                                        ID: {track.track.id}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid item className={classes.buttonCenter}>\r\n                                                {track.beatmaps ? (\r\n                                                    <div>\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={handleOpen}\r\n                                                        >\r\n                                                            Maps\r\n                                                        </Button>\r\n                                                        <Modal\r\n                                                            aria-labelledby=\"simple-modal-title\"\r\n                                                            aria-describedby=\"simple-modal-description\"\r\n                                                            open={open}\r\n                                                            onClose={\r\n                                                                handleClose\r\n                                                            }\r\n                                                        >\r\n                                                            <div\r\n                                                                className={\r\n                                                                    classes.modal\r\n                                                                }\r\n                                                            >\r\n                                                                <h2 id=\"simple-modal-title\">\r\n                                                                    Beatmaps\r\n                                                                </h2>\r\n                                                                <div id=\"simple-modal-description\">\r\n                                                                    {track.beatmaps.beatmaps.map(\r\n                                                                        beatmap => (\r\n                                                                            <div\r\n                                                                                key={\r\n                                                                                    beatmap.beatmap_id\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <Typography>\r\n                                                                                    {\r\n                                                                                        beatmap.title\r\n                                                                                    }\r\n                                                                                    ,\r\n                                                                                    by\r\n                                                                                    {\r\n                                                                                        beatmap.mapper\r\n                                                                                    }\r\n                                                                                    AR\r\n                                                                                    {\r\n                                                                                        beatmap.difficulty_ar\r\n                                                                                    }\r\n                                                                                </Typography>\r\n                                                                                <Button\r\n                                                                                    variant=\"contained\"\r\n                                                                                    color=\"primary\"\r\n                                                                                    target=\"_blank\"\r\n                                                                                    href={\r\n                                                                                        \"https://osu.ppy.sh/beatmapsets/\" +\r\n                                                                                        beatmap.beatmapset_id\r\n                                                                                    }\r\n                                                                                >\r\n                                                                                    Download\r\n                                                                                </Button>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    )}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Modal>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    (loading !== track.track.id ? <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={() =>\r\n                                                            handleSingular(\r\n                                                                track.track,\r\n                                                                track.track.id\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        Get\r\n                                                    </Button> : <CircularProgress/>)\r\n                                                )}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Paper>\r\n                                </Grid>\r\n    )\r\n}\r\n\r\nexport default TrackList"]},"metadata":{},"sourceType":"module"}