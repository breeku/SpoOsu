{"ast":null,"code":"import _slicedToArray from \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\web_dev\\\\github\\\\SpoOsu\\\\client\\\\src\\\\components\\\\Playlists.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport spotifyPlaylists from \"../services/spotifyPlaylists\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport debug from \"../helpers/debug\";\nimport LazyLoad from \"react-lazyload\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  image: {\n    margin: \"0.5em\",\n    minWidth: 500,\n    maxWidth: 500,\n    minHeight: 500,\n    maxHeight: 500,\n    backgroundColor: \"rgba(0,0,0,0)\",\n    transition: \"transform .2s\",\n    \"&:hover\": {\n      transform: \"scale(1.03)\"\n    }\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n}));\nconst HtmlTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: \"#f5f5f9\",\n    color: \"rgba(0, 0, 0, 0.87)\",\n    maxWidth: 320,\n    fontSize: theme.typography.pxToRem(14),\n    border: \"1px solid #dadde9\"\n  }\n}))(Tooltip);\n\nconst Playlists = ({\n  accessToken,\n  refreshToken,\n  history,\n  cachedPlaylist\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        playlist = _useState2[0],\n        setPlaylist = _useState2[1];\n\n  const classes = useStyles();\n  const tokens = {\n    accessToken,\n    refreshToken\n  };\n  const currentElement = useCallback(node => {\n    if (node !== null) {\n      if (node.className === history) {\n        node.scrollIntoView({\n          block: \"center\",\n          behavior: \"smooth\"\n        });\n      }\n    }\n  }, [history]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      let response = await spotifyPlaylists.getPlaylists(tokens); //console.log(response)\n\n      setPlaylist(response.items); //setPlaylist(debug.items)\n\n      console.log(\"get playlists\");\n    };\n\n    if (cachedPlaylist) {\n      setPlaylist(cachedPlaylist);\n    } else {\n      fetchPlaylists();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return React.createElement(Grid, {\n    container: true,\n    style: {\n      paddingLeft: \"7%\",\n      paddingRight: \"7%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, playlist.map(list => React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    md: 6,\n    xl: 4,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(HtmlTooltip, {\n    title: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, list.name), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Tracks: \", list.tracks.total, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), \"Made by: \", list.owner.display_name)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\".concat(list.id),\n    ref: currentElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: {\n      pathname: \"/main/tracks/\",\n      state: {\n        list,\n        playlist\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(LazyLoad, {\n    height: 500,\n    placeholder: React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }),\n    once: true,\n    offset: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: classes.image,\n    src: list.images[0].url,\n    alt: list.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }))))))));\n};\n\nexport default Playlists;","map":{"version":3,"sources":["F:\\web_dev\\github\\SpoOsu\\client\\src\\components\\Playlists.js"],"names":["React","useState","useEffect","useCallback","spotifyPlaylists","Grid","makeStyles","withStyles","Link","Tooltip","Typography","CircularProgress","debug","LazyLoad","useStyles","theme","root","flexGrow","image","margin","minWidth","maxWidth","minHeight","maxHeight","backgroundColor","transition","transform","img","display","HtmlTooltip","tooltip","color","fontSize","typography","pxToRem","border","Playlists","accessToken","refreshToken","history","cachedPlaylist","playlist","setPlaylist","classes","tokens","currentElement","node","className","scrollIntoView","block","behavior","fetchPlaylists","response","getPlaylists","items","console","log","paddingLeft","paddingRight","map","list","name","tracks","total","owner","display_name","id","pathname","state","images","url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\r\nimport spotifyPlaylists from \"../services/spotifyPlaylists\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Tooltip from \"@material-ui/core/Tooltip\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\n\r\nimport debug from \"../helpers/debug\"\r\n\r\nimport LazyLoad from \"react-lazyload\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    image: {\r\n        margin: \"0.5em\",\r\n        minWidth: 500,\r\n        maxWidth: 500,\r\n        minHeight: 500,\r\n        maxHeight: 500,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        transition: \"transform .2s\",\r\n        \"&:hover\": {\r\n            transform: \"scale(1.03)\"\r\n        }\r\n    },\r\n    img: {\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n        maxWidth: \"100%\",\r\n        maxHeight: \"100%\"\r\n    }\r\n}))\r\n\r\nconst HtmlTooltip = withStyles(theme => ({\r\n    tooltip: {\r\n        backgroundColor: \"#f5f5f9\",\r\n        color: \"rgba(0, 0, 0, 0.87)\",\r\n        maxWidth: 320,\r\n        fontSize: theme.typography.pxToRem(14),\r\n        border: \"1px solid #dadde9\"\r\n    }\r\n}))(Tooltip)\r\n\r\nconst Playlists = ({ accessToken, refreshToken, history, cachedPlaylist }) => {\r\n    const [playlist, setPlaylist] = useState([])\r\n\r\n    const classes = useStyles()\r\n\r\n    const tokens = {\r\n        accessToken,\r\n        refreshToken\r\n    }\r\n\r\n    const currentElement = useCallback(\r\n        node => {\r\n            if (node !== null) {\r\n                if (node.className === history) {\r\n                    node.scrollIntoView({ block: \"center\", behavior: \"smooth\" })\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    )\r\n\r\n    useEffect(() => {\r\n        const fetchPlaylists = async () => {\r\n            let response = await spotifyPlaylists.getPlaylists(tokens)\r\n            //console.log(response)\r\n            setPlaylist(response.items)\r\n            //setPlaylist(debug.items)\r\n            console.log(\"get playlists\")\r\n        }\r\n        if (cachedPlaylist) {\r\n            setPlaylist(cachedPlaylist)\r\n        } else {\r\n            fetchPlaylists()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container style={{ paddingLeft: \"7%\", paddingRight: \"7%\" }}>\r\n            {playlist.map(list => (\r\n                <Grid container item xs={12} md={6} xl={4} justify=\"center\">\r\n                    <HtmlTooltip\r\n                        title={\r\n                            <div>\r\n                                <Typography variant=\"h6\">\r\n                                    {list.name}\r\n                                </Typography>\r\n                                <Typography>\r\n                                    Tracks: {list.tracks.total}\r\n                                    <br />\r\n                                    Made by: {list.owner.display_name}\r\n                                </Typography>\r\n                            </div>\r\n                        }\r\n                    >\r\n                        <div className={`${list.id}`} ref={currentElement}>\r\n                            <Link\r\n                                to={{\r\n                                    pathname: `/main/tracks/`,\r\n                                    state: { list, playlist }\r\n                                }}\r\n                            >\r\n                                <LazyLoad\r\n                                    height={500}\r\n                                    placeholder={<CircularProgress />}\r\n                                    once\r\n                                    offset={100}\r\n                                >\r\n                                    <img\r\n                                        className={classes.image}\r\n                                        src={list.images[0].url}\r\n                                        alt={list.name}\r\n                                    />\r\n                                </LazyLoad>\r\n                            </Link>\r\n                        </div>\r\n                    </HtmlTooltip>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n"]},"metadata":{},"sourceType":"module"}